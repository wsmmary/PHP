给出 n 代表生成括号的对数，请你写出一个函数，使其能够生成所有可能的并且有效的括号组合。

例如，给出 n = 3，生成结果为：

[
  "((()))",
  "(()())",
  "(())()",
  "()(())",
  "()()()"
]

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/generate-parentheses
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

class Solution {

    /**
     * @param Integer $n
     * @return String[]
     */
    function generateParenthesis($n) {
        $result = [];
        $this->generate(0, 0, $n, $result, '');
        return $result;
    }
        /**
     * @comment 递归生成合法字符串
     * @author ZouZhipeng <zzpwestlife@gmail.com>
     * @date 2019/12/21
     * @time 22:07
     * @param $leftCount int 左括号数量
     * @param $rightCount int 右括号数量
     * @param $count int 括号对数量
     * @param $result array 结果集
     * @param $str string 当前处理的字符串
     * @return array
     */
    private function generate($leftCount, $rightCount, $count, &$result, $str)
    {
        // terminator 左右括号都与所需数量相等，递归结束
        if ($leftCount == $count && $rightCount == $count) {
            $result[] = $str;
            return $result;
        }

        // processor

        // drill down
        // 左括号数量仍不够，继续递归
        if ($leftCount < $count) {
            $this->generate($leftCount + 1, $rightCount, $count, $result, $str . '(');
        }

        // 右括号数量小于左括号数量才能递归，此处做了剪枝，减少了递归数量
        if ($rightCount < $leftCount) {
            $this->generate($leftCount, $rightCount + 1, $count, $result, $str . ')');
        }
        // clean
    }

}
